diff --git a/Frontend-nextjs/lib/api/transactionsApi.ts b/Frontend-nextjs/lib/api/transactionsApi.ts
@@
-export async function fetchTransactions(token: string): Promise<Transaction[]> {
-    // --------------------------------------------------
-    // Richiede le transazioni dalla più recente alla più vecchia
-    // --------------------------------------------------
-    const res = await fetch(`${API_URL}/v1/financialoverview?sort_by=date&sort_direction=desc`, {
-        headers: {
-            "Content-Type": "application/json",
-            Authorization: `Bearer ${token}`,
-            Accept: "application/json",
-        },
-    });
+export async function fetchTransactions(
+    token: string,
+    params: {
+        page?: number;
+        per_page?: number;
+        from?: string;
+        to?: string;
+        category_id?: number;
+        sort_by?: string;
+        sort_direction?: "asc" | "desc";
+    } = {}
+): Promise<Transaction[]> {
+    const query = new URLSearchParams({
+        sort_by: params.sort_by ?? "date",
+        sort_direction: params.sort_direction ?? "desc",
+    });
+    if (params.page) query.set("page", String(params.page));
+    if (params.per_page) query.set("per_page", String(Math.min(params.per_page, 100)));
+    if (params.from) query.set("start_date", params.from);
+    if (params.to) query.set("end_date", params.to);
+    if (params.category_id) query.set("category_id", String(params.category_id));
+
+    const res = await fetch(`${API_URL}/v1/financialoverview?${query.toString()}`, {
+        headers: {
+            "Content-Type": "application/json",
+            Authorization: `Bearer ${token}`,
+            Accept: "application/json",
+        },
+    });
@@
-        const data = JSON.parse(raw);
-        return Array.isArray(data) ? data : Object.values(data);
+        const data = JSON.parse(raw);
+        return Array.isArray(data) ? data : data.data ?? Object.values(data);
     } catch {
         throw new Error("Risposta non valida");
     }
 }
