<?php

namespace Modules\{{Module}}\Http\Controllers;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\View\View;
use Modules\{{Module}}\Models\{{Model}};
use Modules\{{Module}}\Services\{{Model}}Service;
use Modules\{{Module}}\Http\Requests\Store{{Model}}Request;
use Modules\{{Module}}\Http\Requests\Update{{Model}}Request;
use ApiResponse;

class {{Model}}Controller extends Controller
{
    // ============================
    // Constructor
    // ============================
    public function __construct(protected {{Model}}Service $service)
    {
        $this->middleware('auth:sanctum');
        $this->authorizeResource({{Model}}::class, '{{model}}');
    }

    // ============================
    // Index - List items
    // ============================
    public function index(Request $request): JsonResponse|View
    {
        $items = $this->service->getAllForUser();

        return $request->wantsJson()
            ? ApiResponse::success('{{ModelPlural}} caricati.', $items)
            : view('{{module}}::index', compact('items'));
    }

    // ============================
    // Create - Show form
    // ============================
    public function create(): View
    {
        return view('{{module}}::create');
    }

    // ============================
    // Store - Save new item
    // ============================
    public function store(Store{{Model}}Request $request): JsonResponse|RedirectResponse
    {
        /** @var \Illuminate\Http\Request $request */
        $item = $this->service->createForUser($request->validated());

        return $request->wantsJson()
            ? ApiResponse::success('{{Model}} creato.', $item, 201)
            : redirect()->route('{{module}}.web.index')->with('status', '{{Model}} aggiunto!');
    }

    // ============================
    // Show - Display details
    // ============================
    public function show(Request $request, {{Model}} ${{model}}): JsonResponse|View
    {
        return $request->wantsJson()
            ? ApiResponse::success('{{Model}} trovato.', ${{model}})
            : view('{{module}}::show', compact('{{model}}'));
    }

    // ============================
    // Edit - Show edit form
    // ============================
    public function edit({{Model}} ${{model}}): View
    {
        return view('{{module}}::edit', compact('{{model}}'));
    }

    // ============================
    // Update - Save changes
    // ============================
    public function update(Update{{Model}}Request $request, {{Model}} ${{model}}): JsonResponse|RedirectResponse
    {
        /** @var \Illuminate\Http\Request $request */
        $this->service->update(${{model}}, $request->validated());

        return $request->wantsJson()
            ? ApiResponse::success('{{Model}} aggiornato.', ${{model}})
            : redirect()->route('{{module}}.web.index')->with('status', '{{Model}} aggiornato!');
    }

    // ============================
    // Destroy - Delete item
    // ============================
    public function destroy(Request $request, {{Model}} ${{model}}): JsonResponse|RedirectResponse
    {
        $this->service->delete(${{model}});

        return $request->wantsJson()
            ? ApiResponse::success('{{Model}} eliminato.', null, 204)
            : redirect()->route('{{module}}.web.index')->with('status', '{{Model}} eliminato!');
    }
}

